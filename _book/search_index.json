[["index.html", "Getting Started with the Climate Adaptation Data Platform 1 Preface 1.1 License", " Getting Started with the Climate Adaptation Data Platform Brian Lee Yung Rowe 2024-06-24 1 Preface We are witnessing the effects of climate change quickly accelerate. The consequences of these changes are just starting to be felt. To avoid widespread suffering, we need to similarly accelerate climate adaptation initiatives. The Climate Adaptation Data Platform (CADP) aims to do just that. By bringing together multiple stakeholders, we can solve multiple climate-related challenges concurrently. This drives down costs and increases reach. Consistent with the above goal, the CADP is an open source project. This guide details how to use and develop the CADP. Those wishing to contribute to the CADP should read this guide first. Those who only want to use the CADP can skip most of the theory and focus on the latter half of the book. 1.1 License Copyright (C) 2024 Zato Novo, LLC. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled “GNU Free Documentation License”. "],["overview.html", "2 Overview", " 2 Overview The Climate Adaptation Data Platform (CADP) accelerates climate adaptation initiatives by bringing together multiple stakeholders to addresss multiple climate-related challenges. The primary stakeholders are policymakers/governments, farmers, and individual members of the community. The CADP provides tangible value to each stakeholder. Real-time sensor networks with integrated forecasting and AI is a complex undertaking. It requires numerous people with specialized expertise cutting across GIS, IOT, data science, as well as target domains like agriculture, environment, or public health. The magic of the CADP is that it manages this complexity to reduce the effort required to deploy such a platform. It also supports multiple deployment pathways to accommodate different situations. Forward-thinking municipalities can deploy the platform as a standalone initiative. Citizens can also induce action by deploying a device network from the bottom up. These devices automatically plug into the public CADP instance, which helps demonstrate the value of the device network. Figure 2.1: The CADP brings together critical data infrastructure with end-user advisory and policy tools to create value greater than the sum of its parts. This document discusses the different use cases that CADP is designed for and the value people get from these use cases. Where applicable, a distinction will be made between the value individuals get from the platform versus the value policymakers get. After describing the use cases, we move into more technical territory so people can learn how to use and develop the platform further. First is a high-level view of the physical infrastructure and the relationship between a device network and the CADP. Devices are responsible for monitoring environmental conditions and sending the collected data to the platform. "],["quick-start.html", "3 Quick Start 3.1 System Requirements 3.2 Building the Platform 3.3 Platform Demos 3.4 Viewing the dashboard", " 3 Quick Start The Climate Adaptation Data Platform is a turnkey platform for building weather-dependent applications. CADP accelerate food security and public health initiatives by providing all the infrastructure to automatically incorporate hyperlocal forecasts as a data source for precision agriculture digital advisory services heat-health early warning systems infectious disease early warning systems 3.1 System Requirements 3.1.1 Linux The platform will work on most Debian-based Linux distributions. At a minimum you need to have the following available: bash: this is the command line shell where you can execute commands make: this is a standard tool to build software In a new environment, run the bin/init_workstation.sh script to ensure you have the tools you need to build the system. 3.1.1.1 Windows users If your primary operating system is Windows, you will need to install the Windows Subsystem for Linux. This will give you bash and likely make. 3.1.1.2 Mac users OS X is built on BSD. Many of the tools have slight differences from GNU Linux. That said, the system should run without issue on Mac OS X. 3.1.2 Docker Docker is required. The version used to create this repo is $ docker --version Docker version 25.0.3, build 4debf41 If you are on Windows, follow the official instructions for installing the Linux Subsystem for Windows and Docker desktop. 3.2 Building the Platform The full platform can be built using the following command: make all This will first build the platform and then launch it. The following tasks are executed: initialize database initialize the dashboard build all images You can use this command repeatedly. The Makefile is smart enough to know not to re-initialize the database. To verify that the system is running, you can check the logs or check the container statuses directly. Logs can be monitored using make logs, while the container statuses can be viewed by typing docker ps. In this latter command, the output should look something like this: $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES c86a8b8a34a2 zeomancer_system-weather_forecast &quot;tini -g -- /bin/bas…&quot; 3 hours ago Up 3 hours (unhealthy) 443/tcp, 8888/tcp, 0.0.0.0:8180-&gt;80/tcp, :::8180-&gt;80/tcp zeomancer_system-weather_forecast-1 6e2812b24695 zeomancer_system-simulator_etl &quot;tini -g -- /bin/bas…&quot; 3 hours ago Up 3 hours (unhealthy) 80/tcp, 443/tcp, 8004/tcp, 8888/tcp, 0.0.0.0:8081-&gt;8080/tcp, :::8081-&gt;8080/tcp zeomancer_system-simulator_etl-1 27e46eb20065 zeomancer_system-ecm_etl &quot;tini -g -- /app/zeo…&quot; 3 hours ago Up 3 hours (unhealthy) 80/tcp, 443/tcp, 8004/tcp, 8888/tcp, 0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp zeomancer_system-ecm_etl-1 5db4dd92afa2 timescale/timescaledb:latest-pg12 &quot;docker-entrypoint.s…&quot; 3 hours ago Up 3 hours 0.0.0.0:5432-&gt;5432/tcp, :::5432-&gt;5432/tcp zeomancer_system-ts_db-1 3bb9e8c4788a nodered/node-red:latest &quot;./entrypoint.sh&quot; 3 hours ago Up 3 hours (healthy) 0.0.0.0:9002-&gt;1880/tcp, :::9002-&gt;1880/tcp zeomancer_system-node_red-1 dc8c438b1bf3 eclipse-mosquitto:2.0.18-openssl &quot;/docker-entrypoint.…&quot; 3 hours ago Up 3 hours 0.0.0.0:1883-&gt;1883/tcp, :::1883-&gt;1883/tcp, 0.0.0.0:9001-&gt;9001/tcp, :::9001-&gt;9001/tcp zeomancer_system-mqtt_broker-1 42c737867360 gcr.io/micro-dynamo-351417/bank-transaction-classification_service &quot;bash&quot; 9 days ago Up 9 days 8080/tcp laughing_mendeleev To stop the platform, just type make stop. You can restart the platform by running make run. The previous state will be retained when you start back up. 3.3 Platform Demos A number of demos can be deployed into your running system. These are not installed by default because we want a clean system after initialization. They also require a lot of weather data, which is impractical to include with the system. 3.3.1 Get available demos This target shows all the available demos and the regions where stations can be loaded. make list-demos 3.3.2 Deploy a demo Deploying a demo means that all source weather data is downloaded and loaded into the database. Once the source data are loaded, it is possible to run a simulation to show how the system state evolves over time or batch run all the forecasting models and risk rules until an arbitrary end date. The drawback of the simulator approach is that it will take a while to observe. make run-demo During the installation of a demo, you will be prompted to choose whether to continue with running batch forecasts or not. 3.3.3 View dashboard There are two dashboard views. One defines the data processing workflows and is for application developers. The other is for policymakers and shows the device network and corresponding weather and application information. 3.3.4 Reset system To run another demo, you need to reset the system state. A make target makes this a simple task. Be careful: it also makes it easy to lose all your work, since it deletes everything in the database!! make reset 3.4 Viewing the dashboard 3.4.1 Policymaker dashboard The end-user reporting dashboard for decisionmakers and policymakers is located at http://localhost:9002/dashboard/. 3.4.2 System administration dashboard The workflows that define the processing jobs are defined in Node RED. They are accessible at http://localhost:9002/#flow/. "],["use-cases.html", "4 Use Cases 4.1 Public health 4.2 Precision agriculture 4.3 Hotter Times", " 4 Use Cases Every device powers multiple simultaneous use cases. We call this use case stacking. This is different from re-using or re-purposing a device. With use case stacking, multiple applications run concurrently. The supported use cases depend on the sensors attached. The two main public health use cases only need the base set of sensors, which means anybody with an account can get hyperlocal heat risk and mosquito abundance information. Figure 4.1: The CADP provides a common infrastructure that powers multiple concurrent applications. Each application can leverage the sensor data available from other applications, providing additional value. Figure 4.2: A prototype weather station device deployed at the University of Dar es Salaam test farm in Tanzania. 4.1 Public health 4.1.1 Early warning systems The genesis of this project was the death of 11,000 people in Libya due to a medicane (Mediterranean hurricane) that caused a dam to fail. People were caught off guard because as a failed state, Libya has no functioning weather agency. It turns out that most of Africa has limited weather stations. Most official weather agencies only send out seasonal forecasts. Weather forecasts give people critical time to plan and prepare for major weather events. Building on top of weather forecasts are early warning systems (EWS). These systems apply rules, or risk protocols, to forecasts to determine the level of risk people are exposed to. EWSes can operate on any type of forecast and includes heat risk, air quality risk, the spread of wildfire, the spread of infectious disease, and the spread of pests like the ash borer. The UN declared a mandate that everyone should be covered by an early warning system by 2030. Some $3 billion dollars have been earmarked for this effort. While many countries have early warning systems, many are outdated, no longer work, or cover a limited number of risks. The CADP provides the infrastructure to quickly build EWSes and fulfill the UN’s vision. 4.1.2 Heat risk Survivability is the upper limit of temperature and humidity that humans can withstand. Humidity has a significant impact on the maximum temperature that humans can survive in. With high humidity, the body loses its ability to regulate temperature via perspiration. In some places, climate change is making heat waves more extreme and pushing temperatures to the survivability level. Even if that limit isn’t reached, whether those conditions are livable is another matter. Livability limits help people understand what activities are possible given temperature and humidity (and sun exposure). Figure 4.3 compares livability limits for two population groups and whether the activity takes place in direct sun or shade. Figure 4.3: Livability limits for different METs at different temperature and humidity levels. Source: (Vanos, Guzman-Echavarria, and Baldwin 2023) The conversion formula between METs (\\(M\\)) and calories is \\[\\begin{align} M \\frac{3.5 m}{200} = kcal/min, \\end{align}\\] where \\(m\\) is mass in kilograms. This formula enables us to customize the heat risk of specific activities according to each individual and their specific health conditions. Heat risk builds on the concept of livability. The goal is to provide an EWS that helps people understand their heat risk exposure and make decisions about what activities to do or how to mitigate heat risk during certain activities. As shown in 4.4 the platform currently highlights risks Figure 4.4: A screenshot of a policy dashboard showing active heat risk alerts for two devices. Individuals can get personalized heat risk guidance for any device in CADP. Alerts can be delivered via email or via the mobile app. Users can enter some health information to get better alerts. This information is saved but segregated from personally identifiable information (PII). Relevant health information includes age BMI (weight + height) diabetes heart issues We envision a conversational alert message that doubles as a daily planner. Integrating this information with preferred activities results in specific messaging that informs people of what activities are realistic for a given day. On a very hot and humid day, an older person may want to limit sun exposure to an hour. That might mean that golf should be avoided, whereas a stroll through a shaded park is more appropriate. 4.1.3 Mosquito-borne infectious disease Mosquitos are a common disease vector and can carry numerous infectious diseases, such as malaria, dengue fever, zika virus, yellow fever. Disease outbreaks are driven by the growth of a mosquito population. To limit the severity of an outbreak, mosquito surveillance is conducted to monitor the spread of mosquitos. By tracking mosquito abundance, it is possible to predict how large an outbreak might be. Direct observation of mosquitos is an involved process. It requires specialized devices to attract and trap mosquitos. Usually these devices need periodic cleaning. A simpler approach is to use a mosquito abundance model and build risk protocols on that model. These can be calibrated with physical traps (future). Figure 4.5 shows a system of partial differential equations (PDEs) that describe the change in mosquito abundance given a few parameters. Of importance is that both temperature and humidity drive the population growth of mosquitos. Figure 4.5: A system of partial differential equations that model mosquito population growth based on environmental conditions. Source: (Erraguntla, Dave, and Zapletal 2021) We can thus use the temperature and humidity forecasts available in the CADP to make mosquito abundance forecasts. Figure 4.6 shows a graph of a device in the CADP. The green line represents observational data, while the orange time series is the forecast produced by the CADP. Figure 4.6: A device detail view showing historical temperature, a temperature forecast, plus heat risk thresholds. 4.2 Precision agriculture Helping farmers increase food security in Africa was the genesis of this project. Optimizing water used for irrigation is one way that precision agriculture can increase food security. Unfettered irrigation has emptied aquifers across the world. When aquifers are depleted, rainfall becomes a more prominent source of water. Areas that rely on rainwater for irrigation are particularly threatened by changing climates. Minimizing water usage also improves public health. Many areas rely on rain water as their primary potable water source. That means irrigation is often competing with personal hydration for water. Optimizing water usage means there can be sufficient water for both needs. Figure 4.7: UDSM professors and agronomy staff standing behind a prototype weather station device. Our goal is to make precision agriculture accessible to smallholder farmers worldwide. We accomplish this by making the technology easy to use and affordable. To simplify the deployment process and ensure success, irrigation control can be divided into three milestones that build on each other. Illustrated in 4.8, the first stage is signaling when there will be dry soil. The goal is to ensure plants do not dry out. This step is good to get comfortable with the forecasting accuracy of the system and develop confidence that it behaves correctly. Just a single device with a soil moisture sensor is required. It can be placed in a garden bed that gets fairly even watering. In the second stage, an evapotranspiration model is applied to the device data. Evapotranspiration models are crop specific and determine the amount of water a plant loses due to evaporation (from soil) and transpiration (from leaves). By incorporating this model, plants can receive the optimal amount of water they need, not just prevent dry conditions. There should be noticeable improved yield at this stage. This step requires one device per crop. The final stage brings water control into the system. The first two stages still require human intervention to actually water plants. The final stage is nearly fully automated, with the exception of the water source. (With additional sensors, the system can prevent pumping if no water is available.) In addition to a water source, stage 3 requires along with a pump, tubing, and water valves. Water flow meters can also be added to monitor the water usage. Automated irrigation control removes the guesswork of watering. With continuous monitoring the system knows how much water is available to the plant. Using the integrated evapotranspiration models and sensor data, the system knows how much water plants need and can provide that precise amount. The end result is optimal growing conditions that can improve yield while reducing the work required to manage the crops. Figure 4.8: Precision irrigation control can be phased in over three key stages. In the first stage, a single device can monitor a garden. In the second stage, one device should be allocated per crop. In the final stage, pumps and valves are added to control water supply to individual crops. 4.2.1 Dry soil forecasting Forecasting dry soil is the first step in irrigation control. Soil that is either too dry or too wet can be harmful to plants. While the optimal amount of water is specific to each plant, preventing over and underwatering can be accomplished simply by monitoring soil moisture. A soil moisture forecast can notify the farmer or gardener when soil needs watering. By waiting for a watering signal, this approach avoids overwatering, which conserves water. The deployment model shown in Figure 4.9 is relatively simple. A single sensor device is required that has a soil moisture sensor attached to it. Figure 4.9: A simple installation where a single device monitors soil moisture for a crop. 4.2.2 Crop water needs Watering depends on the type of plant growing. Some plants need a lot of water while others don’t. Many plants don’t like wet roots, so watering cannot be too frequent. We need to develop these control models for each plant. Water needs change based on the maturity of the plant. Beans need moist soil when pods are forming. To form large roots, beets need minimal water during early growth stages to promote root development. We can extract this data from various agricultural sites, such as the Farmers Almanac. The information needs to be encoded into programmatic rules. Crop calendars show the planting season and duration for different regions. Figure 4.10: Crop calendars for Kenya. Source: (“Crop Calendars for East Africa,” n.d.) We use the approach defined by Brouwer and Heibloem (1986) that determines water need based on evapotranspiration \\(ET_o\\) and a crop factor \\(K_c\\). Evapotranspiration tells us how much water is transferred to the atmosphere. We can use these models to estimate how much water plants need to stay healthy. By combining these models with our sensor data, we can minimize the amount of water needed for irrigation. TODO: Incorporate information from this webpage: https://www.fao.org/4/s2022e/s2022e07.htm#3.2.4%20determination%20of%20crop%20factors Knowing whether soil needs irrigation depends on a few factors. First, the crop determines the general watering schedule. Decisions are made based on reconciling watering needs with current environmental conditions. We need to know the current soil moisture level. We also want to know the future soil moisture level, which factors in weather forecasts. There’s no point watering today if it will rain tomorrow. 4.2.3 Irrigation control Automated irrigation control builds on top of the water needs forecasting model. Figure 4.11: A more sophisticated system with a separate device that controls an irrigation pump. 4.2.4 Freeze warnings Farmers and gardeners in temperate or similar climates need to know when there are frosts that could damage fragile seedlings. Uncertainty leads to wasted time preparing for non-events or stress worrying about whether plants will be okay. Crop tables typically show temperature ranges that specific crops can tolerate. Figure 4.12: Planting guides for different vegetables 4.3 Hotter Times This site is used to display public data related to the sensor network. Hotter Times thus becomes a public service where everyone can benefit from the device network. All of the layers discussed above can be displayed on Hotter Times. References "],["physical-infrastructure.html", "5 Physical Infrastructure 5.1 Direct WiFi connections 5.2 BLE connections", " 5 Physical Infrastructure Devices can connect with the CADP via different means. Figure 5.1 shows two different approaches. The simplest approach is to connect directly via WiFi. In this approach, a device communicates directly with the CADP MQTT server. This approach works well when reliable WiFi is available. Figure 5.1: Different network configuration of system. The method used for remote areas with limited infastructure utilizes a mobile phone as an intermediary. In this approach we assume that mobile phones (with a network connection) exist in proximity to devices but they are no fixed internet gateways. We call the mobile phones ephemeral gateways because they may disappear at any time. Ephemeral gateways (EGs) offer a temporary network connection. The EG is responsible for pushing data to the CADP MQTT server. If a network connection is unavailable, it will cache the data on the mobile phone until a network connection is available. Once a connection is established, the EG must push the data to the server. Devices are connected together via the LoRa wireless protocol. When a particular device connects with an ephemeral gateway, it broadcasts a message to other connected devices and notifies them that it has a network connection. This device will attempt to upload as much data to the mobile device as possible. Devices that receive this message will begin broadcasting data to be received by the device connected to the EG. The broadcast includes the ID of the device connected to the EG. Only the device connected to the EG can broadcast an ack back. In the event that multiple EGs are available, each device is responsible for choosing the device to use as the target EG. 5.1 Direct WiFi connections Devices connected via WiFi will start a MQTT client to send directly to the cloud MQTT broker. By default, the MQTT broker host is mqtt.zeomancer.com. 5.2 BLE connections When a smartphone connects to a device via BLE, a few things happen: the device sends a test data packet to confirm that data is sent to the MQTT broker the device waits for an ack from the smartphone if successful, LoRa is activated a internet_available message is broadcast over LoRa 5.2.1 Data routing algorithm The data routing algorithm solves one key problem, which is the existence of ephemeral gateways. Devices are connected to each other via LoRa. The goal is to efficiently route data through the LoRa network to devices that are connected to the network (a “connected device”). LoRa works via a broadcast mechanism, so devices are either in range or out of range of a connected device. If a device is in range, then the device simply broadcasts its data to the target connected device. Any other device that receives the message will ignore the message if the target id does not match its device id. For a device that is out of range, it will send data to the nearest device in range of a connected device. The devices can be modeled as a graph where each device is a node and edges represent the signal strength between them. We can define two relevant distance metrics between two arbitrary nodes: the number of edges (aka hops) between nodes; the harmonic mean of the signal strength of the edges separating the nodes. A device chooses a target device by considering the harmonic mean of the signal strengths between it and a connected device. Generally, the device should choose the path with the highest value. Note that this may change as EGs can move around and disappear altogether. "],["mobile-app.html", "6 Mobile app 6.1 Key user stories", " 6 Mobile app Our vision is to deliver on the UN’s goal to have everyone protected by an early warning system. Many EWSes are outdated or out of commission. Others only focus on a single hazard, whereas now we need a multi-hazard EWS. Finally, messaging for many EWSes are often too generic to be useful. What people need is a personalized EWS. A mobile application is used to mediate the network connection for devices in remote areas. It is also used to deliver alerts to users. Using the device as an alert delivery mechanism ensures users have the device installed and able to act as a data transport for devices. Finally, the mobile app also provides a vehicle for users to provide feedback and information back to public officials. 6.1 Key user stories 6.1.1 I want to pair my phone to a device 6.1.2 I want to view recent device data Helps users understand the contribution they are making to the network. 6.1.3 I want to unpair a device 6.1.4 I want to view the available risk alerts I can subscribe to public health heat risk mosquito risk precision agriculture dry soil wet soil municipal infrastructure flood risk 6.1.5 I want to subscribe to heat risk alerts "],["device-operation.html", "7 Device Operation 7.1 Components", " 7 Device Operation Devices are designed to work with minimal configuration. Even if you have a fixed WiFi connection available, it is simplest to configure the device via your smartphone. The basic steps are: install device in activity area pair device via Bluetooth configure device via app set location (optional) configure and enable WiFi 7.1 Components The following information is provided in the event that repairs need to be made to a device. 433MHZ SX1278 LoRa Module 7.1.1 Connectors Molex 51005-2P connector for LiPo batteries "],["cadp-architecture.html", "8 CADP Architecture 8.1 Design principles 8.2 Database 8.3 Sensor data ingestion 8.4 Weather forecasting 8.5 Early warning system", " 8 CADP Architecture The architecture of the CADP comprises: a low power and long range sensor devices; a data collection and storage facility; a pluggable predictive models for producing forecasts and predictions; a reporting dashboard for decisionmakers and policymakers; and a delivery mechanism to provide alerts and suggested interventions to individual stakeholders. Figure 8.1: System architecture to generate weather forecasts and monitor devices. The system has two primary sources of data. The first is baseline weather forecast data, produced by the European Center for Medium-range Weather Forecasts (ECMWF). This is a global, gridded dataset with 0.4 degree resolution. These forecasts are archived in Amazon S3 and are publicly accessible. The second dataset comes from the devices themselves. The sensor data is used to tune the gridded forecast according to local conditions. 8.1 Design principles Plan for 18 month shelf life Focus on end-to-end infrastructure Stub components where necessary Use concurrency where appropriate to minimize wall time Minimize data movement Minimize cost 8.2 Database 8.3 Sensor data ingestion 8.3.1 Raw sensor data Stored as an unnormalized delimited file. These files have no header, and each row is self-contained. The general format of the file is key,timestamp,values, where values represents an arbitrary number of additional fields. For example, the following snippet shows actual sensor data in this format. air_t_h_p,2024-01-15T00:03:26,-5.34,85.30,1048.80 battery,2024-01-15T00:08:23,0.8398108 air_t_h_p,2024-01-15T00:13:20,-5.19,83.84,1049.22 air_t_h_p,2024-01-15T00:23:15,-5.11,82.51,1049.31 battery,2024-01-15T00:28:12,0.8361486 air_t_h_p,2024-01-15T00:33:09,-6.98,83.39,1049.73 air_t_h_p,2024-01-15T00:43:03,-6.97,82.98,1050.29 battery,2024-01-15T00:48:00,0.8359045 air_t_h_p,2024-01-15T00:52:57,-6.99,84.48,1050.52 air_t_h_p,2024-01-15T00:57:44,-5.05,84.28,1050.53 battery,2024-01-15T01:02:44,0.8312657 air_t_h_p,2024-01-15T01:02:45,-6.87,84.85,1050.91 air_t_h_p,2024-01-15T01:12:39,-5.05,84.56,1050.78 air_t_h_p,2024-01-15T01:22:33,-5.06,84.41,1051.12 battery,2024-01-15T01:22:34,0.8307775 air_t_h_p,2024-01-15T01:32:28,-6.99,83.29,1051.41 air_t_h_p,2024-01-15T01:42:22,-6.87,82.33,1051.89 battery,2024-01-15T01:42:22,0.8363928 air_t_h_p,2024-01-15T01:52:16,-6.61,80.60,1052.68 air_t_h_p,2024-01-15T02:01:55,-6.27,80.06,1053.42 battery,2024-01-15T02:01:56,0.831754 air_t_h_p,2024-01-15T02:11:50,-6.34,77.78,1053.46 air_t_h_p,2024-01-15T02:21:44,-6.39,76.10,1053.47 battery,2024-01-15T02:21:45,0.8322423 air_t_h_p,2024-01-15T02:31:39,-6.17,73.03,1053.98 air_t_h_p,2024-01-15T02:41:33,-6.08,71.05,1054.36 battery,2024-01-15T02:41:33,0.8361486 Two observation types are included. The first is air_t_h_p, which represents air observations. The key hints that there are three value fields. The second observation type is battery and contains a single reading for the battery level. 8.3.2 Data issues When the device cannot connect to the Internet for a while, it loses it’s internal time, and the clock resets to 2000-01-01. These data points can be dropped. Even if the clock doesn’t reset, there can be clock drift. This can usually be ignored since the observations are aggregated anyway. 8.4 Weather forecasting The system uses the ECMWF global gridded forecast data as a baseline forecast. Local sensor data is integrated into this forecast to produce a more accurate forecast for specific locations. 8.4.1 ECMWF forecasts ECMWF forecasts are updated every six hours. The publicly available AWS archive has a complete history of data. Usage for the bash script that downloads the data appears in Appendix A. There are up to 48 forecast steps per forecast. Each forecast step ranges between 27 MB - 50 MB, which implies a minimum of 1.3 GB of data is retrieved every six hours (per update). To save space, these files need to be slimmed down by removing all unnecessary data. 8.5 Early warning system "],["forecasting-algorithms.html", "9 Forecasting algorithms 9.1 Air temperature 9.2 Soil moisture", " 9 Forecasting algorithms 9.1 Air temperature 9.2 Soil moisture We want to forecast soil moisture based on current environmental conditions. There are four main variables that likely drive soil moisture: air temperature air humidity precipitation current soil moisture We can use a recursive least squares (RLS) implementation as a starting point. This is the same approach used for the temperature forecast, so it should be straightforward to modify. Predicting soil moisture is confounded by the fact that a change in moisture can be driven by weather but also human intervention. The latter case will create spikes in soil moisture data. These need to be handled with care to avoid erroneous model behavior. "],["risk-protocols.html", "10 Risk Protocols 10.1 Soil moisture", " 10 Risk Protocols 10.1 Soil moisture Forecasting dry soil is the first step in irrigation control. The forecast is simply the moisture content of the soil. When soil moisture reaches a certain level, an alert needs to be generated. A risk protocol defines the soil moisture level that triggers an alert. The risk protocol is governed by a few factors: associated crop growth stage of crop Each plant has its own water needs, so risk protocols need to be plant-specific. We assume the soil moisture sensor is for horticulture or agriculture, so there is a specific crop that the sensor is associated with. This could be an herb, a vegetable, or even an ornamental. Water needs vary depending on the growth stage of the plant. When beets are young, they are intentionally stressed with less water to promote root development. Beans need plenty of water during pod formation. To simplify the model, we can ignore the growth stage aspect of the plant and pick one value. "],["contributing-to-cadp.html", "11 Contributing to CADP 11.1 Our Kanban process 11.2 Micropython", " 11 Contributing to CADP 11.1 Our Kanban process We follow a Kanban process that Brian perfected over six years. The approach is designed to minimize coordination time and miscommunication in a distributed and asynchronous collaboration environment. The process was successful during COVID while managing a remote team in the Philippines. 11.1.1 Lean production Kanban literally means “sign board” in Japanese. Its history is steeped in lean production and like most of lean production, its genesis occurred at Toyota. To really understand the Kanban approach it’s necessary to understand a bit about lean production, and in particular the concept of efficiency and waste. Our starting assumption is that we want to optimize processes so they are maximally efficient. What does it mean to be efficient? One definition focuses on what it isn’t or doesn’t have, which is waste. Lean production aims to remove as much waste from a process as possible. The more waste is removed, the more efficient the process. Lean production defines seven wastes, often abbreviated as TIMWOOD. These are transportation: moving parts, inventory from one location to another. Long distances or small capacities result in waiting and expose materials to transportation risk inventory: storage of parts and goods. Inventory can get damaged or obsolete, leading to wasted resources movement: physical movement of the body, like walking to a copy machine. Movement expends energy and consumes time. Less physical movement for repeated tasks saves time waiting: idle time waiting on someone else (or a dependency). Time is money; you’re typically paying someone to do nothing over production: creating more than necessary. Excess becomes inventory, so money and time is spent producing things that don’t provide value over processing: doing more than necessary (e.g., over-thinking, over-designing). Ignoring the Pareto principle and the law of diminishing returns leads to spending a lot of time to achieve little incremental improvement defects: manufacturing errors, communication errors. While the original context was physical production, the seven wastes of lean transfer remarkably well to business processes, software development, and even AI systems. It’s particularly important for data and data science: transportation: moving data from one server to another. Data transfer rates and bandwidth limit the rate of delivery. inventory: storage of data and artifacts. Like inventory, data can become obsolete, and it costs money to store it. movement: manual steps in processes. The more steps with human involvement, the longer it takes to accomplish and the more error prone they are waiting: for data to download/upload, model to finish running, coordination over production: creating too much data over processing: over-designing a process, over-fitting a model defects: data errors, model errors, process errors, communication errors 11.1.2 Loose coupling and asynchronous communication The original kanbans were pieces of paper that were placed at the bottom of a parts bin. This sign board communicated to the consumer of those parts that it was time to get more parts. They would take the card to the producer of those parts so they could begin making more. Kanban is thus an integral part of just-in-time (JIT) production, where said production is driven by a pull process (initiated by demand). The genius of kanban is that each producer operates independently and coordination is asynchronous. An effective kanban process doesn’t require a lot of meetings nor does it require a lot of coordination. All it requires is an understanding of and adherence to the process. 11.1.3 Kanban for project management Outside of a physical production process, a centralized kanban board can mediate communication between relevant parties. Each person fulfills a particular role and has certain actions they can take. Note that a person can fulfill multiple roles. For software, the roles can include: product owner: responsible for defining requirements and setting priorities individual contributor: responsible for implementing requirements tester: responsible for testing implementations and documenting errors deployer: responsible for deploying code to different environments The kanban itself is simply a set of columns in a particular order. The columns hold cards or stories that define work to be done. Each column represents the state of the cards within the column. While any columns are allowed, I use a standard set. Figure 11.1 shows the relationship between the column states and how cards can move between those states. Figure 11.1: A state diagram representing where cards can move from each column. The starting state is always Ideas, and the end state is always Done. Here is a description of each column state: ideas: represents a proposed work item. Anyone can add a card to ideas, but only the product owner can move a card from ideas into the backlog. backlog: represents prioritized work that has (sufficiently) complete requirements. This column acts as a queue. in progress: represents work that is actively being worked on. Individual contributors move cards from the Backlog into In Progress and assign themselves to the card. To minimize ambiguity, there should be one card owner that is ultimately responsible for the completion of the card. Typically people add an update each day they work on the card. This is critical as it provides visibility into the process and eliminates the need for status updates or in-person meetings! blocked: represents a stuck state, where an external situation is preventing forward progress. Card owners move cards from In Progress to Blocked and must include an explanation of the blocker. The card owner is responsible for coordinating the solution to unblock the card. Once a card is unblocked, the card owner moves the card back to In Progress. for review: when work is finished on a card (code complete), the card owner moves the card to For Review. She must tag a reviewer and follow up to ensure the card is reviewed in a timely manner. Depending on the team, a reviewer can be another individual contributor or the product owner. If there is significant work to be done for a review, the card owner may move the card back to In Progress. For simple issues, it can remain in For Review. done: work that has gotten a successful review is moved here by the card owner. It is up to the team to agree on the definition of “done”. This state can signify code has been merged to the master branch, deployed into a particular environment, or something else. 11.1.4 The need for discipline Kanban works because of the visual signaling and the clear rules for each role. When everyone adheres to the rules of the board, communication errors are reduced since people have the same interpretation of the status of a card. It’s similar to driving. The rules of a four-way stop sign are clear. When everyone follows the rules, the flow is efficient and there are minimal delays or accidents. But the moment one person ignores the rules, then the expectation changes. It is no longer clear what the protocol is, and accidents can happen. 11.2 Micropython 11.2.1 UNIX port For development, using the UNIX port of Micropython can be helpful. Install from source: $ sudo apt-get update &amp;&amp; sudo apt-get install libffi-dev $ git clone git@github.com:micropython/micropython.git $ cd ../ports/unix $ make submodules $ make or install an old (stable) version via sudo apt-get install micropython. After this, Micropython can now be used in the terminal by using the command micropython. It can also run a python file via micopython foo.py. "],["references.html", "12 References", " 12 References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
